#####################################################################################################
#
# This file is for reference only, changes have no effect on the generated interface implementations.
#
#####################################################################################################

# Id: 2
# Message: Can not inject the same realm '%s' in a single security domain.
# @param 1: realmName - 
duplicateRealmInjection=\u4E0D\u80FD\u5728\u4E00\u4E2A\u5B89\u5168\u57DF\u4E2D\u6CE8\u5165\u76F8\u540C\u7684\u57DF '%1$s'\u3002
# Id: 3
# Message: The operation did not contain an address with a value for '%s'.
# @param 1: key - 
operationAddressMissingKey=\u6B64\u64CD\u4F5C\u4E0D\u5305\u542B\u91C7\u7528 '%1$s' \u503C\u7684\u5730\u5740\u3002
# Id: 4
# Message: Unable to start the service.
unableToStartService=\u65E0\u6CD5\u542F\u52A8\u670D\u52A1\u3002
# Id: 5
# Message: Unable to access KeyStore to complete the requested operation.
unableToAccessKeyStore=\u65E0\u6CD5\u8BBF\u95EE KeyStore \u6765\u5B8C\u6210\u8BF7\u6C42\u7684\u64CD\u4F5C\u3002
# Id: 7
# Message: The required service '%s' is not UP, it is currently '%s'.
# @param 1: serviceName - the name of the service that is required.
# @param 2: state - the actual state of the service.
requiredServiceNotUp=\u6240\u9700\u7684\u670D\u52A1 '%1$s' \u4E0D\u662F UP\uFF0C\u5B83\u76EE\u524D\u662F '%2$s'\u3002
# Id: 8
# Message: Invalid operation name '%s', expected one of '%s'
# @param 1: actualName - the operation name contained within the request.
# @param 2: expectedNames - the expected operation names.
invalidOperationName=\u65E0\u6548\u7684\u64CD\u4F5C\u540D\u79F0 '%1$s'\uFF0C\u9884\u671F '%2$s' \u4E2D\u7684\u4E00\u4E2A
# Id: 9
# Message: Unable to complete operation. '%s'
# @param 1: causeMessage - 
unableToCompleteOperation=\u65E0\u6CD5\u5B8C\u6210\u64CD\u4F5C\u3002'%1$s'
# Id: 10
# Message: Unable to save KeyStore - KeyStore file '%s' does not exist.
# @param 1: file - 
cantSaveWithoutFile=\u65E0\u6CD5\u4FDD\u5B58 KeyStore - KeyStore \u6587\u4EF6 '%1$s' \u4E0D\u5B58\u5728\u3002
# Id: 12
# Message: No suitable provider found for type '%s'
# @param 1: type - the type being searched for.
noSuitableProvider=\u672A\u627E\u5230\u9002\u5408\u7C7B\u578B '%1$s' \u7684\u63D0\u4F9B\u7A0B\u5E8F
# Id: 13
# Message: The default-realm '%s' is not in the list of realms [%s] referenced by this domain.
# @param 1: defaultRealm - the name of the default_realm specified.
# @param 2: realms - 
defaultRealmNotReferenced=\u9ED8\u8BA4\u57DF '%1$s' \u4E0D\u5728\u88AB\u6B64\u57DF\u5F15\u7528\u7684\u57DF [%2$s] \u5217\u8868\u4E2D\u3002
# Id: 14
# Message: Unable to load the properties files required to start the properties file backed realm: Users file: '%s' Groups file: '%s'
# @param 1: usersFile - 
# @param 2: groupsFile - 
unableToLoadPropertiesFiles=\u65E0\u6CD5\u52A0\u8F7D\u542F\u52A8\u5C5E\u6027\u6587\u4EF6\u652F\u6301\u57DF\u6240\u9700\u7684\u5C5E\u6027\u6587\u4EF6\uFF1A\u7528\u6237\u6587\u4EF6\uFF1A'%1$s' \u7EC4\u6587\u4EF6\uFF1A'%2$s'
# Id: 15
# Message: The custom component implementation '%s' does not implement method initialize(Map<String, String>), however configuration has been supplied.
# @param 1: className - the class name of the custom component implementation being loaded.
componentNotConfigurable=\u81EA\u5B9A\u4E49\u7EC4\u4EF6\u5B9E\u73B0 '%1$s' \u4E0D\u5B9E\u73B0\u65B9\u6CD5\u521D\u59CB\u5316(Map<String, String>)\uFF0C\u4F46\u5DF2\u63D0\u4F9B\u4E86\u914D\u7F6E\u3002
# Id: 16
# Message: The supplied regular expression '%s' is invalid.
# @param 1: pattern - the regular expression that failed validation.
invalidRegularExpression=\u63D0\u4F9B\u7684\u6B63\u5219\u8868\u8FBE\u5F0F '%1$s' \u65E0\u6548\u3002
# Id: 17
# Message: Property file referenced in properties-realm does not exist: %s
# @param 1: file - the missing file detail.
propertyFilesDoesNotExist=\u5C5E\u6027\u57DF\u5F15\u7528\u7684\u5C5E\u6027\u6587\u4EF6\u4E0D\u5B58\u5728\uFF1A%1$s
# Id: 18
# Message: Unable to create %s for algorithm '%s'.
# @param 1: type - the type of manager factory being created.
# @param 2: algorithm - the requested algorithm.
unableToCreateManagerFactory=\u65E0\u6CD5\u4E3A\u7B97\u6CD5 '%2$s' \u521B\u5EFA %1$s\u3002
# Id: 19
# Message: No '%s' found in injected value.
# @param 1: type - the type required.
noTypeFound=\u672A\u5728\u6CE8\u5165\u503C\u4E2D\u627E\u5230 '%1$s'\u3002
# Id: 20
# Message: Unable to reload the properties files required to by the properties file backed realm.
unableToReLoadPropertiesFiles=\u65E0\u6CD5\u91CD\u65B0\u52A0\u8F7D\u5C5E\u6027\u6587\u4EF6\u652F\u6301\u57DF\u6240\u9700\u7684\u5C5E\u6027\u6587\u4EF6\u3002
# Id: 21
# Message: Exception while creating the permission object for the permission mapping. Please check [class-name], [target-name] (name of permission) and [action] of [%s].
# @param 1: permissionClassName - class-name of the created permission
exceptionWhileCreatingPermission=\u4E3A\u8BB8\u53EF\u6620\u5C04\u521B\u5EFA\u8BB8\u53EF\u5BF9\u8C61\u65F6\u51FA\u73B0\u5F02\u5E38\u3002\u8BF7\u68C0\u67E5 [%1$s] \u7684 [class-name]\u3001[target-name]\uFF08\u8BB8\u53EF\u540D\u79F0\uFF09\u548C [action]\u3002
# Id: 22
# Message: KeyStore file '%s' does not exist and required.
# @param 1: file - 
keyStoreFileNotExists=KeyStore \u6587\u4EF6 '%1$s' \u4E0D\u5B58\u5728\u4F46\u662F\u5FC5\u9700\u7684\u3002
# Id: 23
# Level: WARN
# Message: KeyStore file '%s' does not exist. Used blank.
# @param 1: file - 
keyStoreFileNotExistsButIgnored=KeyStore \u6587\u4EF6 '%1$s' \u4E0D\u5B58\u5728\u3002\u4EE5\u7A7A\u767D\u5F62\u5F0F\u4F7F\u7528\u3002
# Id: 24
# Level: WARN
# Message: Certificate [%s] in KeyStore is not valid
# @param 1: alias - 
certificateNotValid=KeyStore \u4E2D\u7684\u8BC1\u4E66 [%1$s] \u65E0\u6548
# Id: 25
# Message: Referenced property file is invalid: %s
# @param 1: message - 
propertyFileIsInvalid=\u5F15\u7528\u7684\u5C5E\u6027\u6587\u4EF6\u65E0\u6548\uFF1A%1$s
# Id: 27
# Message: Unable to obtain OID for X.500 attribute '%s'
# @param 1: attribute - 
unableToObtainOidForX500Attribute=\u65E0\u6CD5\u4E3A X.500 \u5C5E\u6027 '%1$s' \u83B7\u53D6 OID
# Id: 28
# Message: The X.500 attribute must be defined by name or by OID
x500AttributeMustBeDefined=\u5FC5\u987B\u6309\u540D\u79F0\u6216 OID \u5B9A\u4E49 X.500 \u5C5E\u6027
# Id: 29
# Message: Failed to parse URL '%s'
# @param 1: url - 
invalidURL=\u89E3\u6790 URL '%1$s' \u5931\u8D25
# Id: 30
# Message: Realm '%s' does not support cache
# @param 1: realmName - 
realmDoesNotSupportCache=\u57DF '%1$s' \u4E0D\u652F\u6301\u7F13\u5B58
# Id: 31
# Message: Unable to access CRL file.
unableToAccessCRL=\u65E0\u6CD5\u8BBF\u95EE CRL \u6587\u4EF6\u3002
# Id: 32
# Message: Unable to reload CRL file.
unableToReloadCRL=\u65E0\u6CD5\u91CD\u65B0\u52A0\u8F7D CRL \u6587\u4EF6\u3002
# Id: 33
# Message: Unable to access entry [%s] from key store [%s].
# @param 1: alias - the entry that couldn't be accessed
# @param 2: keyStore - the keystore
unableToAccessEntryFromKeyStore=\u65E0\u6CD5\u8BBF\u95EE\u5BC6\u94A5\u5E93 [%2$s] \u4E2D\u7684\u6761\u76EE [%1$s]\u3002
# Id: 34
# Message: A principal query can only have a single key mapper
jdbcRealmOnlySingleKeyMapperAllowed=\u4E3B\u4F53\u67E5\u8BE2\u53EA\u80FD\u5177\u5907\u4E00\u4E2A\u5BC6\u94A5\u6620\u5C04\u5668
# Id: 35
# Message: Unable to load module '%s'.
# @param 1: module - 
unableToLoadModule=\u65E0\u6CD5\u52A0\u8F7D\u6A21\u5757 '%1$s'\u3002
# Id: 36
# Message: Security realm '%s' has been referenced twice in the same security domain.
# @param 1: realmName - the name of the security realm referenced twice.
realmRefererencedTwice=\u5728\u540C\u4E00\u4E2A\u5B89\u5168\u57DF\u4E2D\uFF0C\u5B89\u5168\u57DF '%1$s' \u88AB\u5F15\u7528\u4E86\u4E24\u6B21
# Id: 37
# Message: Injected value is not of '%s' type.
# @param 1: type - the type required.
invalidTypeInjected=\u6CE8\u5165\u503C\u4E0D\u662F '%1$s' \u7C7B\u578B\u3002
# Id: 38
# Message: Could not load permission class '%s'
# @param 1: className - 
invalidPermissionClass=\u65E0\u6CD5\u52A0\u8F7D\u8BB8\u53EF\u7C7B '%1$s'
# Id: 39
# Message: Unable to reload CRL file - TrustManager is not reloadable
unableToReloadCRLNotReloadable=\u65E0\u6CD5\u91CD\u65B0\u52A0\u8F7D CRL \u6587\u4EF6 - TrustManager \u65E0\u6CD5\u52A0\u8F7D
# Id: 40
# Message: Unable to load the permission module '%s' for the permission mapping
# @param 1: module - 
invalidPermissionModule=\u65E0\u6CD5\u4E3A\u8BB8\u53EF\u6620\u5C04\u52A0\u8F7D\u8BB8\u53EF\u6A21\u5757 '%1$s'
# Id: 41
# Message: Unable to transform configuration to the target version - attribute '%s' is different from '%s'
# @param 1: attribute1 - 
# @param 2: attribute2 - 
unableToTransformTornAttribute=\u65E0\u6CD5\u628A\u914D\u7F6E\u8F6C\u6362\u5230\u76EE\u6807\u7248\u672C - \u5C5E\u6027 '%1$s' \u4E0E '%2$s' \u4E0D\u540C
# Id: 42
# Message: Unable to transform multiple 'authorization-realms' to the single value
unableToTransformMultipleRealms=\u65E0\u6CD5\u628A\u591A\u4E2A 'authorization-realms' \u8F6C\u6362\u4E3A\u5355\u4E2A\u503C
# Id: 43
# Message: A cycle has been detected initialising the resources - %s
# @param 1: cycle - 
cycleDetected=\u5DF2\u68C0\u6D4B\u5230\u4E00\u4E2A\u521D\u59CB\u5316\u8D44\u6E90\u7684\u5FAA\u73AF - %1$s
# Id: 44
# Message: Unexpected name of servicename's parent - %s
# @param 1: canonicalName - 
invalidServiceNameParent=\u670D\u52A1\u540D\u79F0\u7684\u7236\u9879\u7684\u610F\u5916\u540D\u79F0 - %1$s
# Id: 45
# Message: Failed to load CallbackHandler from the provided module.
failedToLoadCallbackhandlerFromProvidedModule=\u65E0\u6CD5\u4ECE\u63D0\u4F9B\u7684\u6A21\u5757\u4E2D\u52A0\u8F7D\u56DE\u8C03\u5904\u7406\u7A0B\u5E8F\u3002
# Id: 46
# Message: Provided path '%s' to JAAS configuration file does not exist.
# @param 1: path - 
jaasFileDoesNotExist=\u63D0\u4F9B\u7684 '%1$s' JAAS \u914D\u7F6E\u6587\u4EF6\u7684\u8DEF\u5F84\u4E0D\u5B58\u5728\u3002
# Id: 47
# Level: WARN
# Message: LDAP Realm is configured to use direct-verification and user-password-mapper which is invalid configuration.
ldapRealmDirectVerificationAndUserPasswordMapper=LDAP \u57DF\u88AB\u914D\u7F6E\u4E3A\u4F7F\u7528\u76F4\u63A5\u9A8C\u8BC1\u548C\u7528\u6237-\u5BC6\u7801-\u6620\u5C04\u5668\uFF0C\u8FD9\u662F\u65E0\u6548\u7684\u914D\u7F6E\u3002
# Id: 48
# Message: A string representation of an X.500 distinguished name is required: %s
# @param 1: causeMessage - 
representationOfX500IsRequired=\u9700\u8981 X.500 \u53EF\u533A\u5206\u540D\u79F0\u7684\u5B57\u7B26\u4E32\u5F62\u5F0F\uFF1A%1$s
# Id: 909
# Message: Credential store '%s' does not support given credential store entry type '%s'
# @param 1: credentialStoreName - 
# @param 2: entryType - 
credentialStoreEntryTypeNotSupported=\u51ED\u8BC1\u5E93 '%1$s' \u4E0D\u652F\u6301\u7ED9\u5B9A\u7684\u51ED\u8BC1\u5E93\u6761\u76EE\u7C7B\u578B '%2$s'
# Id: 910
# Message: Password cannot be resolved for key-store '%s'
# @param 1: path - 
keyStorePasswordCannotBeResolved=\u65E0\u6CD5\u4E3A keystore '%1$s' \u89E3\u6790\u5BC6\u7801
# Id: 911
# Message: Credential store '%s' protection parameter cannot be resolved
# @param 1: name - 
credentialStoreProtectionParameterCannotBeResolved=\u65E0\u6CD5\u89E3\u6790\u51ED\u636E\u5E93 '%1$s' \u4FDD\u62A4\u53C2\u6570
# Id: 913
# Message: Credential alias '%s' of credential type '%s' already exists in the store
# @param 1: alias - 
# @param 2: credentialType - 
credentialAlreadyExists=\u5E93\u4E2D\u5DF2\u5B58\u5728\u51ED\u636E\u7C7B\u578B '%2$s' \u7684\u51ED\u636E\u522B\u540D '%1$s'
# Id: 914
# Message: Provider loader '%s' cannot supply Credential Store provider of type '%s'
# @param 1: providerLoader - 
# @param 2: type - 
providerLoaderCannotSupplyProvider=\u63D0\u4F9B\u7A0B\u5E8F\u52A0\u8F7D\u5668 '%1$s' \u4E0D\u80FD\u63D0\u4F9B\u7C7B\u578B '%2$s' \u7684\u51ED\u636E\u5E93\u63D0\u4F9B\u7A0B\u5E8F
# Id: 916
# Message: Credential cannot be resolved
credentialCannotBeResolved=\u65E0\u6CD5\u89E3\u6790\u51ED\u8BC1
# Id: 917
# Message: Password cannot be resolved for dir-context
dirContextPasswordCannotBeResolved=\u65E0\u6CD5\u4E3A dir-context \u89E3\u6790\u5BC6\u7801
# Id: 920
# Message: Credential alias '%s' of credential type '%s' does not exist in the store
# @param 1: alias - 
# @param 2: credentialType - 
credentialDoesNotExist=\u5E93\u4E2D\u4E0D\u5B58\u5728\u51ED\u636E\u7C7B\u578B '%2$s' \u7684\u51ED\u636E\u522B\u540D '%1$s'
# Id: 921
# Message: Location parameter is not specified for filebased keystore type '%s'
# @param 1: type - 
filebasedKeystoreLocationMissing=\u6CA1\u6709\u4E3A\u57FA\u4E8E\u6587\u4EF6\u7684 keystore \u7C7B\u578B '%1$s' \u5B9A\u4E49\u4F4D\u7F6E\u53C2\u6570
# Id: none
# Message: Reload dependent services which might already have cached the secret value
reloadDependantServices=\u91CD\u65B0\u52A0\u8F7D\u53EF\u80FD\u5DF2\u7F13\u5B58\u4E86\u79D8\u5BC6\u503C\u7684\u4F9D\u8D56\u670D\u52A1
# Id: none
# Message: Update dependent resources as alias '%s' does not exist anymore
# @param 1: alias - 
updateDependantServices=\u66F4\u65B0\u4F9D\u8D56\u8D44\u6E90\uFF0C\u56E0\u4E3A\u522B\u540D\u4E3A '%1$s' \u7684\u8D44\u6E90\u5DF2\u4E0D\u5B58\u5728
# Id: 922
# Message: Unable to load credential from credential store.
unableToLoadCredential=\u65E0\u6CD5\u4ECE\u51ED\u8BC1\u5B58\u50A8\u52A0\u8F7D\u51ED\u8BC1\u3002
# Id: 923
# Message: Unable to encrypt the supplied clear text.
unableToEncryptClearText=\u65E0\u6CD5\u52A0\u5BC6\u63D0\u4F9B\u7684\u6E05\u6670\u6587\u672C\u3002
# Id: 924
# Message: Unable to create immediately available credential store.
unableToCreateCredentialStoreImmediately=\u65E0\u6CD5\u7ACB\u5373\u521B\u5EFA\u53EF\u7528\u7684\u51ED\u8BC1\u5B58\u50A8\u3002
# Id: 925
# Message: Unable to reload the credential store.
unableToReloadCredentialStore=\u65E0\u6CD5\u91CD\u65B0\u8F7D\u5165\u51ED\u8BC1\u5B58\u50A8\u3002
# Id: 926
# Message: Unable to initialize the credential store.
unableToInitialiseCredentialStore=\u65E0\u6CD5\u521D\u59CB\u5316\u51ED\u8BC1\u5B58\u50A8\u3002
# Id: 927
# Message: The secret key operation '%s' failed to complete due to '%s'.
# @param 1: operationName - 
# @param 2: error - 
secretKeyOperationFailed=\u7531\u4E8E '%2$s'\uFF0C\u5BC6\u94A5\u64CD\u4F5C '%1$s' \u65E0\u6CD5\u5B8C\u6210\u3002
# Id: 1000
# Message: Identity with name [%s] already exists.
# @param 1: principalName - 
identityAlreadyExists=\u5DF2\u5B58\u5728\u540D\u79F0\u4E3A [%1$s] \u7684\u8EAB\u4EFD\u3002
# Id: 1001
# Message: Could not create identity with name [%s].
# @param 1: principalName - 
couldNotCreateIdentity=\u65E0\u6CD5\u521B\u5EFA\u540D\u79F0\u4E3A [%1$s] \u7684\u8EAB\u4EFD\u3002
# Id: 1002
# Message: Identity with name [%s] not found.
# @param 1: principalName - 
identityNotFound=\u672A\u627E\u5230\u540D\u79F0\u4E3A [%1$s] \u7684\u8EAB\u4EFD\u3002
# Id: 1003
# Message: Could not delete identity with name [%s].
# @param 1: principalName - 
couldNotDeleteIdentity=\u65E0\u6CD5\u5220\u9664\u540D\u79F0\u4E3A [%1$s] \u7684\u8EAB\u4EFD\u3002
# Id: 1004
# Message: Identity with name [%s] not authorized.
# @param 1: principalName - 
identityNotAuthorized=\u540D\u79F0\u4E3A [%1$s] \u7684\u8EAB\u4EFD\u672A\u83B7\u5F97\u6388\u6743\u3002
# Id: 1005
# Message: Could not read identity [%s] from security domain [%s].
# @param 1: principalName - 
# @param 2: domainServiceName - 
couldNotReadIdentity.2=\u65E0\u6CD5\u8BFB\u53D6\u5B89\u5168\u57DF [%2$s] \u4E2D\u7684\u8EAB\u4EFD [%1$s]\u3002
# Id: 1007
# Message: Could not read identity with name [%s].
# @param 1: principalName - 
couldNotReadIdentity.1=\u65E0\u6CD5\u8BFB\u53D6\u540D\u79F0\u4E3A [%1$s] \u7684\u8EAB\u4EFD\u3002
# Id: 1008
# Message: Failed to obtain the authorization identity.
couldNotObtainAuthorizationIdentity=\u672A\u80FD\u83B7\u53D6\u6388\u6743\u8EAB\u4EFD\u3002
# Id: 1009
# Message: Failed to add attribute.
couldNotAddAttribute=\u672A\u80FD\u6DFB\u52A0\u5C5E\u6027\u3002
# Id: 1010
# Message: Failed to remove attribute.
couldNotRemoveAttribute=\u672A\u80FD\u5220\u9664\u5C5E\u6027\u3002
# Id: 1011
# Message: Could not create password.
couldNotCreatePassword=\u65E0\u6CD5\u521B\u5EFA\u5BC6\u7801\u3002
# Id: 1012
# Message: Unexpected password type [%s].
# @param 1: passwordType - 
unexpectedPasswordType=\u610F\u5916\u7684\u5BC6\u7801\u7C7B\u578B [%1$s]\u3002
# Id: 1013
# Message: Pattern [%s] requires a capture group
# @param 1: pattern - 
patternRequiresCaptureGroup=\u6A21\u5F0F [%1$s] \u9700\u8981\u4E00\u4E2A\u6355\u83B7\u7EC4
# Id: 1014
# Message: Invalid [%s] definition. Only one of '%s' or '%s' can be set in one Object in the list of filters.
# @param 1: property - 
# @param 2: filterNameOne - 
# @param 3: filterNameTwo - 
invalidDefinition=\u65E0\u6548\u7684 [%1$s] \u5B9A\u4E49\u3002\u53EA\u6709 '%2$s' \u6216 '%3$s' \u4E2D\u7684\u4E00\u9879\u53EF\u5728\u8FC7\u6EE4\u5668\u5217\u8868\u4E2D\u7684\u4E00\u4E2A Object \u4E2D\u8BBE\u7F6E\u3002
# Id: 1015
# Message: Unable to perform automatic outflow for '%s'
# @param 1: identityName - 
unableToPerformOutflow=\u65E0\u6CD5\u5BF9 '%1$s' \u6267\u884C\u81EA\u52A8\u6D41\u51FA\u3002
# Id: 1016
# Message: Server '%s' not known
# @param 1: server - 
serverNotKnown=\u670D\u52A1\u5668 '%1$s' \u662F\u672A\u77E5\u7684
# Id: 1017
# Message: Invalid value for cipher-suite-filter. %s
# @param 1: causeMessage - 
invalidCipherSuiteFilter=cipher-suite-filter \u7684\u65E0\u6548\u503C\u3002%1$s
# Id: 1018
# Message: Invalid size %s
# @param 1: size - 
invalidSize=\u65E0\u6548\u7684\u5927\u5C0F %1$s
# Id: 1019
# Message: The suffix (%s) can not contain seconds or milliseconds.
# @param 1: suffix - 
suffixContainsMillis=\u540E\u7F00\uFF08%1$s\uFF09\u4E0D\u80FD\u5305\u542B\u79D2\u6216\u6BEB\u79D2\u3002
# Id: 1020
# Message: The suffix (%s) is invalid. A suffix must be a valid date format.
# @param 1: suffix - 
invalidSuffix=\u540E\u7F00\uFF08%1$s\uFF09\u662F\u65E0\u6548\u7684\u3002\u540E\u7F00\u5FC5\u987B\u662F\u6709\u6548\u7684\u65E5\u671F\u683C\u5F0F\u3002
# Id: 1022
# Message: Failed to set policy [%s]
# @param 1: policy - 
failedToSetPolicy=\u8BBE\u7F6E\u7B56\u7565 [%1$s] \u5931\u8D25
# Id: 1023
# Message: Could not find policy provider with name [%s]
# @param 1: policyProvider - 
cannotFindPolicyProvider=\u627E\u4E0D\u5230\u540D\u4E3A [%1$s] \u7684\u7B56\u7565\u63D0\u4F9B\u7A0B\u5E8F
# Id: 1024
# Message: Failed to register policy context handlers
failedToRegisterPolicyHandlers=\u6CE8\u518C\u7B56\u7565\u4E0A\u4E0B\u6587\u5904\u7406\u7A0B\u5E8F\u5931\u8D25
# Id: 1025
# Message: Failed to create policy [%s]
# @param 1: className - 
failedToCreatePolicy=\u521B\u5EFA\u7B56\u7565 [%1$s] \u5931\u8D25
# Id: 1026
# Level: WARN
# Message: Element '%s' with attribute '%s' set to '%s' is unused. Since unused policy configurations can no longer be stored in the configuration model this item is being discarded.
# @param 1: element - 
# @param 2: attr - 
# @param 3: name - 
discardingUnusedPolicy=\u9879 '%1$s' (\u5E26\u6709\u5C5E\u6027 '%2$s'\uFF0C\u5E76\u88AB\u8BBE\u7F6E\u4E3A '%3$s') \u6CA1\u6709\u88AB\u4F7F\u7528\u3002\u56E0\u4E3A\u672A\u4F7F\u7528\u7684\u7B56\u7565\u914D\u7F6E\u65E0\u6CD5\u518D\u88AB\u4FDD\u5B58\u5728\u914D\u7F6E\u6A21\u578B\u4E2D\uFF0C\u6240\u4EE5\u8FD9\u4E2A\u9879\u88AB\u629B\u5F03\u3002
# Id: 1027
# Message: Key password cannot be resolved for key-store '%s'
# @param 1: path - 
keyPasswordCannotBeResolved=\u65E0\u6CD5\u4E3A keystore '%1$s' \u89E3\u6790\u5BC6\u94A5\u5BC6\u7801
# Id: 1028
# Message: Invalid value for not-before. %s
# @param 1: causeMessage - 
invalidNotBefore=not-before \u7684\u503C\u65E0\u6548\u3002%1$s
# Id: 1029
# Message: Alias '%s' does not exist in KeyStore
# @param 1: alias - 
keyStoreAliasDoesNotExist=KeyStore \u4E2D\u4E0D\u5B58\u5728\u522B\u540D '%1$s'
# Id: 1030
# Message: Alias '%s' does not identify a PrivateKeyEntry in KeyStore
# @param 1: alias - 
keyStoreAliasDoesNotIdentifyPrivateKeyEntry=\u522B\u540D '%1$s' \u672A\u6807\u8BC6 KeyStore \u4E2D\u7684 PrivateKeyEntry
# Id: 1031
# Message: Unable to obtain PrivateKey for alias '%s'
# @param 1: alias - 
unableToObtainPrivateKey=\u65E0\u6CD5\u83B7\u53D6\u522B\u540D '%1$s' \u7684\u79C1\u94A5
# Id: 1032
# Message: Unable to obtain Certificate for alias '%s'
# @param 1: alias - 
unableToObtainCertificate=\u65E0\u6CD5\u83B7\u53D6\u522B\u540D '%1$s' \u7684\u8BC1\u4E66
# Id: 1033
# Message: No certificates found in certificate reply
noCertificatesFoundInCertificateReply=\u5728\u8BC1\u4E66\u56DE\u590D\u4E2D\u672A\u627E\u5230\u8BC1\u4E66
# Id: 1034
# Message: Public key from certificate reply does not match public key from certificate in KeyStore
publicKeyFromCertificateReplyDoesNotMatchKeyStore=\u8BC1\u4E66\u56DE\u590D\u4E2D\u7684\u516C\u94A5\u4E0E KeyStore \u4E2D\u8BC1\u4E66\u7684\u516C\u94A5\u4E0D\u5339\u914D
# Id: 1035
# Message: Certificate reply is the same as the certificate from PrivateKeyEntry in KeyStore
certificateReplySameAsCertificateFromKeyStore=\u8BC1\u4E66\u56DE\u590D\u548C KeyStore \u4E2D PrivateKeyEntry \u4E2D\u7684\u8BC1\u4E66\u76F8\u540C
# Id: 1036
# Message: Alias '%s' already exists in KeyStore
# @param 1: alias - 
keyStoreAliasAlreadyExists=KeyStore \u4E2D\u5DF2\u5B58\u5728\u522B\u540D '%1$s'
# Id: 1037
# Message: Top-most certificate from certificate reply is not trusted. Inspect the certificate carefully and if it is valid, execute import-certificate again with validate set to false.
topMostCertificateFromCertificateReplyNotTrusted=\u8BC1\u4E66\u56DE\u590D\u4E2D\u6700\u4E0A\u9762\u7684\u8BC1\u4E66\u4E0D\u53EF\u4FE1\u3002\u8BF7\u4ED4\u7EC6\u68C0\u67E5\u6B64\u8BC1\u4E66\uFF0C\u5982\u679C\u6709\u6548\uFF0C\u5219\u5C06\u9A8C\u8BC1\u8BBE\u7F6E\u4E3A false\uFF0C\u518D\u6B21\u6267\u884C import-certificate\u3002
# Id: 1038
# Message: Trusted certificate is already in KeyStore under alias '%s'
# @param 1: alias - 
trustedCertificateAlreadyInKeyStore=\u53EF\u4FE1\u8BC1\u4E66\u5DF2\u7ECF\u5728 KeyStore \u4E2D\u7684\u522B\u540D '%1$s' \u4E0B
# Id: 1039
# Message: Trusted certificate is already in cacerts KeyStore under alias '%s'
# @param 1: alias - 
trustedCertificateAlreadyInCacertsKeyStore=\u53EF\u4FE1\u8BC1\u4E66\u5DF2\u7ECF\u5728 cacerts KeyStore \u4E2D\u7684\u522B\u540D '%1$s' \u4E0B
# Id: 1040
# Message: Unable to determine if the certificate is trusted. Inspect the certificate carefully and if it is valid, execute import-certificate again with validate set to false.
unableToDetermineIfCertificateIsTrusted=\u65E0\u6CD5\u786E\u5B9A\u8BC1\u4E66\u662F\u5426\u53EF\u4FE1\u3002\u8BF7\u4ED4\u7EC6\u68C0\u67E5\u6B64\u8BC1\u4E66\uFF0C\u5982\u679C\u6709\u6548\uFF0C\u5219\u5C06\u9A8C\u8BC1\u8BBE\u7F6E\u4E3A false\uFF0C\u518D\u6B21\u6267\u884C import-certificate\u3002
# Id: 1041
# Message: Certificate file does not exist
certificateFileDoesNotExist=\u8BC1\u4E66\u6587\u4EF6\u4E0D\u5B58\u5728
# Id: 1042
# Message: Unable to obtain Entry for alias '%s'
# @param 1: alias - 
unableToObtainEntry=\u65E0\u6CD5\u83B7\u53D6\u522B\u540D '%1$s' \u7684\u6761\u76EE
# Id: 1043
# Message: Unable to create an account with the certificate authority: %s
# @param 1: causeMessage - 
unableToCreateAccountWithCertificateAuthority=\u65E0\u6CD5\u901A\u8FC7\u8BC1\u4E66\u9881\u53D1\u673A\u6784\u521B\u5EFA\u5E10\u6237\uFF1A%1$s
# Id: 1044
# Message: Unable to change the account key associated with the certificate authority: %s
# @param 1: causeMessage - 
unableToChangeAccountKeyWithCertificateAuthority=\u65E0\u6CD5\u66F4\u6539\u4E0E\u8BC1\u4E66\u9881\u53D1\u673A\u6784\u5173\u8054\u7684\u5E10\u6237\u5BC6\u94A5\uFF1A%1$s
# Id: 1045
# Message: Unable to deactivate the account associated with the certificate authority: %s
# @param 1: causeMessage - 
unableToDeactivateAccountWithCertificateAuthority=\u65E0\u6CD5\u505C\u7528\u4E0E\u8BC1\u4E66\u9881\u53D1\u673A\u6784\u5173\u8054\u7684\u5E10\u6237\uFF1A%1$s
# Id: 1046
# Message: Unable to obtain certificate authority account Certificate for alias '%s'
# @param 1: alias - 
unableToObtainCertificateAuthorityAccountCertificate=\u65E0\u6CD5\u83B7\u53D6\u522B\u540D '%1$s' \u7684\u8BC1\u4E66\u9881\u53D1\u673A\u6784\u5E10\u6237\u8BC1\u4E66
# Id: 1047
# Message: Unable to obtain certificate authority account PrivateKey for alias '%s'
# @param 1: alias - 
unableToObtainCertificateAuthorityAccountPrivateKey=\u65E0\u6CD5\u83B7\u53D6\u522B\u540D '%1$s' \u7684\u8BC1\u4E66\u9881\u53D1\u673A\u6784\u5E10\u6237\u79C1\u94A5
# Id: 1048
# Message: Unable to update certificate authority account key store: %s
# @param 1: causeMessage - 
unableToUpdateCertificateAuthorityAccountKeyStore=\u65E0\u6CD5\u66F4\u65B0\u8BC1\u4E66\u9881\u53D1\u673A\u6784\u5E10\u6237\u5BC6\u94A5\u5E93\uFF1A%1$s
# Id: 1049
# Message: Unable to respond to challenge from certificate authority: %s
# @param 1: causeMessage - 
unableToRespondToCertificateAuthorityChallenge=\u65E0\u6CD5\u54CD\u5E94\u6765\u81EA\u8BC1\u4E66\u9881\u53D1\u673A\u6784\u7684\u6311\u6218\uFF1A%1$s
# Id: 1050
# Message: Invalid certificate authority challenge
invalidCertificateAuthorityChallenge=\u8BC1\u4E66\u9881\u53D1\u673A\u6784\u6311\u6218\u65E0\u6548
# Id: 1051
# Message: Invalid certificate revocation reason '%s'
# @param 1: reason - 
invalidCertificateRevocationReason=\u8BC1\u4E66\u64A4\u9500\u539F\u56E0 '%1$s' \u65E0\u6548
# Id: 1052
# Message: Unable to instantiate AcmeClientSpi implementation
unableToInstatiateAcmeClientSpiImplementation=\u65E0\u6CD5\u5B9E\u4F8B\u5316 AcmeClientSpi \u5B9E\u65BD
# Id: 1053
# Message: Unable to update the account with the certificate authority: %s
# @param 1: causeMessage - 
unableToUpdateAccountWithCertificateAuthority=\u65E0\u6CD5\u901A\u8FC7\u8BC1\u4E66\u9881\u53D1\u673A\u6784\u66F4\u65B0\u5E10\u6237\uFF1A%1$s
# Id: 1054
# Message: Unable to get the metadata associated with the certificate authority: %s
# @param 1: causeMessage - 
unableToGetCertificateAuthorityMetadata=\u65E0\u6CD5\u83B7\u53D6\u4E0E\u8BC1\u4E66\u9881\u53D1\u673A\u6784\u5173\u8054\u7684\u5143\u6570\u636E\uFF1A%1$s
# Id: 1055
# Message: Invalid key size: %d
# @param 1: keySize - 
invalidKeySize=\u5BC6\u94A5\u5927\u5C0F\u65E0\u6548\uFF1A%1$d
# Id: 1056
# Message: A certificate authority account with this account key already exists. To update the contact information associated with this existing account, use %s. To change the key associated with this existing account, use %s.
# @param 1: updateAccount - 
# @param 2: changeAccountKey - 
certificateAuthorityAccountAlreadyExists=\u5DF2\u5B58\u5728\u4F7F\u7528\u6B64\u5E10\u6237\u5BC6\u94A5\u7684\u8BC1\u4E66\u9881\u53D1\u673A\u6784\u5E10\u6237\u3002\u8981\u66F4\u65B0\u4E0E\u6B64\u73B0\u6709\u5E10\u6237\u5173\u8054\u7684\u8054\u7CFB\u4FE1\u606F\uFF0C\u8BF7\u4F7F\u7528 %1$s\u3002\u8981\u66F4\u6539\u4E0E\u6B64\u73B0\u6709\u5E10\u6237\u5173\u8054\u7684\u5BC6\u94A5\uFF0C\u8BF7\u4F7F\u7528 %2$s\u3002
# Id: 1057
# Message: Failed to create ServerAuthModule [%s] using module '%s'
# @param 1: className - 
# @param 2: module - 
failedToCreateServerAuthModule=\u4F7F\u7528\u6A21\u5757 '%2$s' \u521B\u5EFA ServerAuthModule [%1$s] \u5931\u8D25
# Id: 1058
# Message: Failed to parse PEM public key with kid: %s
# @param 1: kid - 
failedToParsePEMPublicKey=\u4F7F\u7528 kid: %1$s \u89E3\u6790 PEM \u516C\u5171\u5BC6\u94A5\u5931\u8D25
# Id: 1059
# Message: Unable to detect KeyStore '%s'
# @param 1: path - 
unableToDetectKeyStore=\u65E0\u6CD5\u68C0\u6D4B\u5230 KeyStore '%1$s'
# Id: 1060
# Message: Fileless KeyStore needs to have a defined type.
filelessKeyStoreMissingType=\u6CA1\u6709\u6587\u4EF6\u7684 KeyStore \u9700\u8981\u6709\u4E00\u4E2A\u5B9A\u4E49\u7684\u7C7B\u578B\u3002
# Id: 1061
# Message: Invalid value of host context map: '%s' is not valid hostname pattern.
# @param 1: hostname - 
invalidHostContextMapValue=\u65E0\u6548\u7684\u4E3B\u673A\u4E0A\u4E0B\u6587\u6620\u5C04\uFF1A'%1$s' \u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u7684\u4E3B\u673A\u540D\u683C\u5F0F\u3002
# Id: 1062
# Message: Value for attribute '%s' is invalid.
# @param 1: attributeName - 
invalidAttributeValue=\u5C5E\u6027 '%1$s' \u7684\u65E0\u6548\u503C\u3002
# Id: 1063
# Message: LetsEncrypt certificate authority is configured by default.
letsEncryptNameNotAllowed=LetsEncrypt \u8BC1\u4E66\u8BA4\u8BC1\u88AB\u9ED8\u8BA4\u914D\u7F6E\u3002
# Id: 1064
# Message: Failed to load OCSP responder certificate '%s'.
# @param 1: alias - 
failedToLoadResponderCert=\u52A0\u8F7D OCSP \u54CD\u5E94\u8005\u8BC1\u4E66 '%1$s' \u5931\u8D25\u3002
# Id: 1065
# Message: Multiple maximum-cert-path definitions found.
multipleMaximumCertPathDefinitions=\u627E\u5230\u591A\u4E2A maximum-cert-path \u5B9A\u4E49\u3002
# Id: 1066
# Message: Invalid value for cipher-suite-names. %s
# @param 1: causeMessage - 
invalidCipherSuiteNames=cipher-suite-names \u7684\u65E0\u6548\u503C\u3002%1$s
# Id: 1067
# Message: Value '%s' is not valid regex.
# @param 1: regex - 
invalidRegex=\u503C "%1$s" \u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u7684\u6B63\u5219\u8868\u8FBE\u5F0F\u3002
# Id: 1068
# Message: Duplicate PolicyContextHandler found for key '%s'.
# @param 1: key - 
duplicatePolicyContextHandler=\u4E3A\u5BC6\u94A5 '%1$s' \u627E\u5230\u7684\u91CD\u590D\u7684 PolicyContextHandler\u3002
# Id: 1069
# Message: Invalid %s loaded, expected %s but received %s.
# @param 1: type - 
# @param 2: expected - 
# @param 3: actual - 
invalidImplementationLoaded=\u65E0\u6548\u7684 %1$s \u52A0\u8F7D\uFF0C\u9884\u671F\u4E3A %2$s\uFF0C\u4F46\u63A5\u6536\u5230 %3$s\u3002
# Id: 1079
# Message: Unable to load module '%s'.
# @param 1: module - 
unableToLoadModuleRuntime=\u65E0\u6CD5\u52A0\u8F7D\u6A21\u5757 '%1$s'\u3002
# Id: 1080
# Message: Non existing key store needs to have defined type.
nonexistingKeyStoreMissingType=\u975E\u73B0\u6709\u5BC6\u94A5\u5B58\u50A8\u9700\u8981\u5DF2\u5B9A\u4E49\u4E86\u7C7B\u578B\u3002
# Id: 1081
# Message: Failed to lazily initialize key manager
failedToLazilyInitKeyManager=\u5EF6\u8FDF\u521D\u59CB\u5316\u5BC6\u94A5\u7BA1\u7406\u5668\u5931\u8D25
# Id: 1082
# Message: Failed to store generated self-signed certificate
failedToStoreGeneratedSelfSignedCertificate=\u5B58\u50A8\u751F\u6210\u7684\u81EA\u7B7E\u540D\u8BC1\u4E66\u5931\u8D25
# Id: 1083
# Message: No '%s' found in injected value.
# @param 1: type - 
noTypeFoundForLazyInitKeyManager=\u672A\u5728\u6CE8\u5165\u503C\u4E2D\u627E\u5230 '%1$s'\u3002
# Id: 1084
# Level: WARN
# Message: KeyStore %s not found, it will be auto generated on first use with a self-signed certificate for host %s
# @param 1: file - 
# @param 2: host - 
selfSignedCertificateWillBeCreated=\u672A\u627E\u5230\u5BC6\u94A5\u5E93 %1$s\uFF0C\u5B83\u5C06\u5728\u7B2C\u4E00\u6B21\u4F7F\u7528\u4E3B\u673A %2$s \u7684\u81EA\u7B7E\u540D\u8BC1\u4E66\u65F6\u81EA\u52A8\u751F\u6210\u3002
# Id: 1085
# Level: WARN
# Message: Generated self-signed certificate at %s. Please note that self-signed certificates are not secure and should only be used for testing purposes. Do not use this self-signed certificate in production.
SHA-1 \u751F\u6210\u5BC6\u94A5\u7684\u6307\u7EB9\u662F %s
SHA-256 \u751F\u6210\u5BC6\u94A5\u7684\u6307\u7EB9\u662F %s
# @param 1: file - 
# @param 2: sha1 - 
# @param 3: sha256 - 
selfSignedCertificateHasBeenCreated=\u5728 %1$s \u751F\u6210\u81EA\u7B7E\u540D\u8BC1\u4E66\u3002\u8BF7\u6CE8\u610F\u81EA\u7B7E\u540D\u8BC1\u4E66\u4E0D\u5B89\u5168\uFF0C\u5E94\u53EA\u7528\u4E8E\u6D4B\u8BD5\u76EE\u7684\u3002\u4E0D\u8981\u5728\u751F\u4EA7\u73AF\u5883\u4E2D\u4F7F\u7528\u8FD9\u4E2A\u81EA\u7B7E\u540D\u8BC1\u4E66\u3002
SHA-1 \u751F\u6210\u5BC6\u94A5\u7684\u6307\u7EB9\u662F %2$s
SHA-256 \u751F\u6210\u5BC6\u94A5\u7684\u6307\u7EB9\u662F %3$s
# Id: 1086
# Message: Unable to initialize Elytron JACC support while legacy JACC support is enabled.
unableToEnableJaccSupport=\u5728\u542F\u7528\u4E86\u65E7\u7684 JACC \u652F\u6301\u65F6\uFF0C\u65E0\u6CD5\u521D\u59CB\u5316 Elytron JACC \u652F\u6301\u3002
# Id: 1087
# Message: Hostname in SNI mapping cannot contain ^ character.
hostContextMapHostnameContainsCaret=SNI \u6620\u5C04\u4E2D\u7684\u4E3B\u673A\u540D\u4E0D\u80FD\u5305\u542B ^ \u5B57\u7B26\u3002
# Id: 1088
# Message: Missing certificate authority challenge
missingCertificateAuthorityChallenge=\u7F3A\u5C11\u8BC1\u4E66\u9881\u53D1\u673A\u6784\u8D28\u8BE2
# Id: 1200
# Message: The name of the resolver to use was not specified and no default-resolver has been defined.
noResolverSpecifiedAndNoDefault=\u672A\u6307\u5B9A\u8981\u4F7F\u7528\u7684\u89E3\u6790\u7A0B\u5E8F\u540D\u79F0\uFF0C\u4E14\u6CA1\u6709\u5B9A\u4E49 default-resolver\u3002
# Id: 1201
# Message: No expression resolver has been defined with the name '%s'.
# @param 1: name - 
noResolverWithSpecifiedName=\u6CA1\u6709\u5B9A\u4E49\u540D\u79F0\u4E3A '%1$s' \u7684\u8868\u8FBE\u5F0F\u89E3\u6790\u5668\u3002
# Id: 1202
# Message: A cycle has been detected initialising the expression resolver for '%s' and '%s'.
# @param 1: firstExpression - 
# @param 2: secondExpression - 
cycleDetectedInitialisingExpressionResolver=\u5DF2\u68C0\u6D4B\u5230 '%1$s' \u548C '%2$s' \u7684\u521D\u59CB\u5316\u8D44\u6E90\u7684\u5FAA\u73AF
# Id: 1203
# Message: Expression resolver initialisation has already failed.
expressionResolverInitialisationAlreadyFailed=\u8868\u8FBE\u5F0F\u89E3\u6790\u5668\u521D\u59CB\u5316\u5DF2\u7ECF\u5931\u8D25\u3002
# Id: 1204
# Message: The expression '%s' does not specify a resolver and no default is defined.
# @param 1: expression - 
expressionResolutionWithoutResolver=\u8868\u8FBE\u5F0F "%1$s" \u6CA1\u6709\u6307\u5B9A\u89E3\u6790\u5668\uFF0C\u4E14\u6CA1\u6709\u5B9A\u4E49\u9ED8\u8BA4\u503C\u3002
# Id: 1205
# Message: The expression '%s' specifies a resolver configuration which does not exist.
# @param 1: expression - 
invalidResolver=\u8868\u8FBE\u5F0F "%1$s" \u6307\u5B9A\u4E86\u4E00\u4E2A\u4E0D\u5B58\u5728\u7684\u89E3\u6790\u5668\u914D\u7F6E\u3002
# Id: 1206
# Message: Unable to decrypt expression '%s'.
# @param 1: expression - 
unableToDecryptExpression=\u65E0\u6CD5\u89E3\u5BC6\u8868\u8FBE\u5F0F "%1$s"\u3002
# Id: 1207
# Message: Resolution of credential store expressions is not supported in the MODEL stage of operation execution.
modelStageResolutionNotSupported=\u64CD\u4F5C\u6267\u884C\u7684 MODEL \u9636\u6BB5\u4E0D\u652F\u6301\u51ED\u8BC1\u5B58\u50A8\u8868\u8FBE\u5F0F\u7684\u89E3\u6790\u3002
# Id: 1208
# Message: Unable to resolve CredentialStore %s -- %s
# @param 1: storeName - 
# @param 2: details - 
unableToResolveCredentialStore=\u65E0\u6CD5\u89E3\u6790 CredentialStore %1$s -- %2$s
# Id: 1209
# Message: Unable to initialize CredentialStore %s -- %s
# @param 1: storeName - 
# @param 2: details - 
unableToInitializeCredentialStore=\u65E0\u6CD5\u521D\u59CB\u5316 CredentialStore %1$s -- %2$s
# Id: 1210
# Message: Initialisation of an %s without an active management OperationContext is not allowed.
# @param 1: initialzingClass - 
illegalNonManagementInitialization=\u4E0D\u5141\u8BB8\u521D\u59CB\u5316\u6CA1\u6709\u6D3B\u8DC3\u7BA1\u7406 OperationContext \u7684 %1$s\u3002
# Id: 1211
# Message: Unable to load the credential store.
unableToLoadCredentialStore=\u65E0\u6CD5\u52A0\u8F7D\u51ED\u636E\u5B58\u50A8\u3002
# Id: 1212
# Message: KeyStore does not contain a PrivateKey for KeyStore: [%s] and alias: [%s].
# @param 1: keyStore - 
# @param 2: alias - 
missingPrivateKey=KeyStore \u4E0D\u5305\u542B KeyStore \u7684 PrivateKey: [%1$s] \u548C\u522B\u540D: [%2$s]\u3002
# Id: 1213
# Message: KeyStore does not contain a PublicKey for KeyStore: [%s] and alias: [%s].
# @param 1: keyStore - 
# @param 2: alias - 
missingPublicKey=KeyStore \u4E0D\u5305\u542B KeyStore \u7684 PublicKey\uFF1A[%1$s] \u548C\u522B\u540D\uFF1A[%2$s]\u3002
# Id: 1214
# Message: Unable to verify the integrity of the filesystem realm: %s
# @param 1: causeMessage - 
unableToVerifyIntegrity=\u65E0\u6CD5\u9A8C\u8BC1\u6587\u4EF6\u7CFB\u7EDF\u57DF\u7684\u5B8C\u6574\u6027\uFF1A%1$s
# Id: 1215
# Message: Filesystem realm is missing key pair configuration, integrity checking is not enabled
filesystemMissingKeypair=\u6587\u4EF6\u7CFB\u7EDF\u57DF\u7F3A\u5C11\u5BC6\u94A5\u5BF9\u914D\u7F6E\uFF0C\u6CA1\u6709\u542F\u7528\u5B8C\u6574\u6027\u68C0\u67E5
# Id: 1216
# Message: Filesystem realm is unable to obtain key store password
unableToGetKeyStorePassword=\u6587\u4EF6\u7CFB\u7EDF\u57DF\u65E0\u6CD5\u83B7\u53D6\u5BC6\u94A5\u5B58\u50A8\u5BC6\u7801
# Id: 1217
# Message: Realm verification failed, invalid signatures for the identities: %s
# @param 1: identities - 
filesystemIntegrityInvalid=\u57DF\u9A8C\u8BC1\u5931\u8D25\uFF0C\u8EAB\u4EFD\u7684\u65E0\u6548\u7B7E\u540D\uFF1A%1$s
# Id: 1218
# Message: Keystore used by filesystem realm does not contain the alias: %s
# @param 1: alias - 
keyStoreMissingAlias=\u6587\u4EF6\u7CFB\u7EDF\u57DF\u4F7F\u7528\u7684 Keystore \u4E0D\u5305\u542B\u522B\u540D\uFF1A%1$s

